@page "/"
@using Microsoft.AspNetCore.Components.Web
@using XtractFlow.Web
@using XtractFlow.Web.Data;
@namespace XtractFlow.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_framework/blazor.server.js"></script>
    <link href="css/site.css" rel="stylesheet" />
    <link href="XtractFlow.Web.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>

    @{
        string apiKey = string.Empty;

        if (HttpContext.Request.Query.ContainsKey(Globals.API_KEY_QUERY_STRING_KEY))
        {
            apiKey = HttpContext.Request.Query[Globals.API_KEY_QUERY_STRING_KEY];
        }
    }


    <component type="typeof(App)" render-mode="ServerPrerendered" param-ApiKey="apiKey" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

<script>
  window.triggerFileDownload = (fileName, url) => {
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
  }
  window.getDimensions = function() {
      return {
              width: window.innerWidth,
              height: window.innerHeight
          };
  };
  window.clipboardCopy = {
      copyText: function(text) {
          navigator.clipboard.writeText(text).then(function () {
              alert("Copied to clipboard!");
          })
          .catch(function (error) {
              alert(error);
          });
      }
  };
</script>
</body>
</html>
